#! /usr/bin/env python

from libcloud.types import Provider 
from libcloud.providers import get_driver 
from libcloud.deployment import MultiStepDeployment, ScriptDeployment, SSHKeyDeployment 
from libcloud.ssh import SSHClient, ParamikoSSHClient
import os, sys, random, string, ConfigParser

# Fetch some values from the config file
config = ConfigParser.RawConfigParser()
config.read('config/frigg.ini')

# Try to abstract the provider here, as we may end up supporting others
# Theoretically since we are using libcloud, it should support any
# provider that supports the deploy_node function (Amazon EC2 doesn't)
provider = config.get('Aegir', 'provider')
provider_driver = config.get(provider, 'driver')

# API credentials
user = config.get(provider, 'user')
key = config.get(provider, 'key')

# Preferred image and size
config_distro = config.get(provider, 'distro')
config_size = config.get(provider, 'size')

# These are used as options to Aegir during install
email = config.get('Aegir', 'email')
domain = config.get('Aegir', 'domain')
version = config.get('Aegir', 'version')

def dependency_check():
	try:
		open(os.path.expanduser("~/.ssh/id_rsa.pub")).read()
	except IOError:
		print "You need at least a public key called id_rsa.pub in your .ssh directory"
		sys.exit(1)
	try:
		import paramiko
	except ImportError:
		print "You need the Paramiko SSH module for Python installed (apt-get install python-paramiko)"
		sys.exit(1)

# Helper script to generate a random password
def gen_passwd():
	N=8
	return ''.join(random.choice(string.ascii_letters + string.digits) for x in range(N))

def main():
	# Run some tests
	dependency_check()

	# Make a new connection
	Driver = get_driver( getattr(Provider, provider_driver) )
	conn = Driver(user, key)

	# Get a list of the available images and sizes
	images = conn.list_images()
	sizes = conn.list_sizes()

	# We'll use the distro and size from the config ini
	preferred_image = [image for image in images if config_distro in image.name]
	assert len(preferred_image) == 1, "We found more than one image for %s, will be assuming the first one" % config_distro

	preferred_size = [size for size in sizes if config_size in size.name]

	# Set a random password for the MySQL root user.
	newpass = gen_passwd()

	# Commands to run immediately after installation
	dispatch = [
		SSHKeyDeployment(open(os.path.expanduser("~/.ssh/id_rsa.pub")).read()),
		ScriptDeployment("apt-get update"),
		ScriptDeployment("apt-get install debian-archive-keyring"),
		ScriptDeployment("apt-get update"),
		ScriptDeployment("echo 'postfix postfix/main_mailer_type select Internet Site' | debconf-set-selections"),
		ScriptDeployment("echo 'postfix postfix/mailname string $HOSTNAME' | debconf-set-selections"),
		ScriptDeployment("echo 'postfix postfix/destinations string localhost.localdomain, localhost' | debconf-set-selections"),
		ScriptDeployment("echo mysql-server mysql-server/root_password select %s | debconf-set-selections" % newpass),
		ScriptDeployment("echo mysql-server mysql-server/root_password_again select %s | debconf-set-selections" % newpass ),
		ScriptDeployment("apt-get -y install apache2 php5 php5-cli php5-gd php5-mysql postfix mysql-server sudo rsync git-core unzip"),
		ScriptDeployment("a2enmod rewrite"),
		ScriptDeployment("ln -s /var/aegir/config/apache.conf /etc/apache2/conf.d/aegir.conf"),
		ScriptDeployment("useradd -r -U -d /var/aegir -m -G www-data aegir"),
		ScriptDeployment("echo 'aegir ALL=NOPASSWD: /usr/sbin/apache2ctl' >> /etc/sudoers"),
                ScriptDeployment("wget -O /tmp/install.sh 'http://drupalcode.org/project/provision.git/blob_plain/refs/tags/%s:/install.sh.txt'" % version),
		ScriptDeployment("su - -s /bin/sh aegir -c 'sh /tmp/install.sh %s --client_email=%s --aegir_db_pass=%s --yes'" % tuple([ domain, email, newpass]))
	]
	msd = MultiStepDeployment(dispatch) 

	# Create and deploy a new server now, and run the deployment steps defined above
	print "Provisioning server and running deployment processes"
	node = conn.deploy_node(name=domain, image=preferred_image[0], size=preferred_size[0], deploy=msd)

	print "Provisioning complete, you can ssh as root to %s" % node.public_ip[0]
	if node.extra.get('password'):
		print "The root user's password is %s" % node.extra.get('password')
	print "The root MySQL user's password is %s" % newpass
	print "Check your e-mail for the Login url to the Aegir frontend"

if __name__ == "__main__":
	main()
